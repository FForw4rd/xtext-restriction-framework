/*
 * generated by Xtext
 */
package at.tugraz.xtext.restrictionframework.generator

import at.tugraz.xtext.restrictionframework.restrictionFramework.Datatype
import at.tugraz.xtext.restrictionframework.restrictionFramework.Object
import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider
import at.tugraz.xtext.restrictionframework.restrictionFramework.Function

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RestrictionFrameworkGenerator implements IGenerator {
	
  @Inject extension IQualifiedNameProvider
 
  override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    for(currObject: resource.allContents.toIterable.filter(Object)) {
      fsa.generateFile(
        currObject.fullyQualifiedName.toString("/") + ".java",
        currObject.generateObject)
    }
    for(currDatatype: resource.allContents.toIterable.filter(Datatype)) {
      fsa.generateFile(
        currDatatype.fullyQualifiedName.toString("/") + ".java",
        currDatatype.generateDatatype)
    }
    for(currFunction: resource.allContents.toIterable.filter(Function)) {
      fsa.generateFile(
        currFunction.fullyQualifiedName.toString("/") + ".java",
        currFunction.generateFunction)
    }
  }
  
  def generateDatatype(Datatype e) ''' 
    «IF e.eContainer.fullyQualifiedName != null»
      package «e.eContainer.fullyQualifiedName»;
    «ENDIF»
    «DatatypeGenerator.generateDatatypeContent(e)»
  '''
 
  def generateObject(Object e) ''' 
    «IF e.eContainer.fullyQualifiedName != null»
      package «e.eContainer.fullyQualifiedName»;
    «ENDIF»
    
    public class «e.name» «IF e.superType != null
            »extends «e.superType.fullyQualifiedName» «ENDIF»{
      «ObjectGenerator.generateObjectContent(e)»
    }
  '''
  
  def generateFunction(Function f)'''
    «IF f.eContainer.fullyQualifiedName != null»
      package «f.eContainer.fullyQualifiedName»;
    «ENDIF»
    
    public class «f.name» «IF f.superType != null
            »extends «f.superType.fullyQualifiedName» «ENDIF»{
      «FunctionGenerator.generateFunctionContent(f)»
    }
  '''
}
