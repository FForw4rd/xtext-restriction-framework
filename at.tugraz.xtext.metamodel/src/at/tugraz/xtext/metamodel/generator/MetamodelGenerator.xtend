/*
 * generated by Xtext
 */
package at.tugraz.xtext.metamodel.generator

import at.tugraz.xtext.metamodel.metamodel.Datatype
import at.tugraz.xtext.metamodel.metamodel.Member
import at.tugraz.xtext.metamodel.metamodel.Object
import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider

class MetamodelGenerator implements IGenerator {
 
  @Inject extension IQualifiedNameProvider
 
  override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    for(e: resource.allContents.toIterable.filter(Object)) {
      fsa.generateFile(
        e.fullyQualifiedName.toString("/") + ".java",
        e.compile)
    }
    for(currDatatype: resource.allContents.toIterable.filter(Datatype)) {
      fsa.generateFile(
        currDatatype.fullyQualifiedName.toString("/") + ".java",
    //    currDatatype.generateDatatype
        DatatypeGenerator.generateDatatype(currDatatype))
    }
  }
 
  def compile(Object e) ''' 
    «IF e.eContainer.fullyQualifiedName != null»
      package «e.eContainer.fullyQualifiedName»;
    «ENDIF»
    
    public class «e.name» «IF e.superType != null
            »extends «e.superType.fullyQualifiedName» «ENDIF»{
      «e.secure»
      «FOR f:e.members»
        «f.compile»
      «ENDFOR»
    }
  '''
	
  def secure(Object e) '''
    private static final boolean issecure = «e.isIssecure»;
    
    public bool isSecure() {
      return this.issecure
    }
    
  '''
 
  def compile(Member f) '''
    private «f.type.fullyQualifiedName» «f.name»;
    
    public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
      return «f.name»;
    }
    
    public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
      this.«f.name» = «f.name»;
    }
  '''
  
//  def compile(Datatype d) '''
//  	public class «d.name» {
//  	  private «d.type» «d.name» «IF d.defaultValue !=null»=«d.defaultValue» «ENDIF»
//  	
//  	  public «d.type» get«d.name.toFirstUpper»() {
//  	    return «d.name»
//  	  }
//  	  public void set«d.name.toFirstUpper»(«d.type» «d.name»){
//  	  «IF(d.dataRestriction != null)»
//  	  	«switch d.dataRestriction {
//  	  		StringRestriction : d.stringRestrictionSetter(d.dataRestriction as StringRestriction)
//  	  		ValueRestriction : d.valueRestrictionSetter(d.dataRestriction as ValueRestriction)
//  	  	}»
//  	  «ELSE»
//  	    this.«d.name» = «d.name»;
//  	«ENDIF»
//  	  }
//  	}
//  '''
}