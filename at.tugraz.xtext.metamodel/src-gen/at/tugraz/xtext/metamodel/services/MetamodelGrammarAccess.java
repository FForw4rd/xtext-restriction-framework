/*
 * generated by Xtext
 */
package at.tugraz.xtext.metamodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MetamodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	Type | Function;
		@Override public ParserRule getRule() { return rule; }

		//Type | Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDatatypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Datatype | //| SecureObject
		//	Object;
		@Override public ParserRule getRule() { return rule; }

		//Datatype | //| SecureObject
		//Object
		public Alternatives getAlternatives() { return cAlternatives; }

		//Datatype
		public RuleCall getDatatypeParserRuleCall_0() { return cDatatypeParserRuleCall_0; }

		////| SecureObject
		//Object
		public RuleCall getObjectParserRuleCall_1() { return cObjectParserRuleCall_1; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Datatype:
		//	"datatype" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"datatype" name=ID
		public Group getGroup() { return cGroup; }

		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		
		////SecureObject:
		////	"object" name = ID "{"
		////		(members += Member)*
		////	"}"
		////;
		//Member:
		//	name=ID ":" type=[Type];
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" type=[Type]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[Type]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_1; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeObjectCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeObjectIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeObjectCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Assignment cIssecureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIssecureIssecureKeyword_5_0 = (Keyword)cIssecureAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Object:
		//	"object" name=ID ("extends" superType=[Object])? "{" members+=Member* issecure?="issecure"? "}";
		@Override public ParserRule getRule() { return rule; }

		//"object" name=ID ("extends" superType=[Object])? "{" members+=Member* issecure?="issecure"? "}"
		public Group getGroup() { return cGroup; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superType=[Object])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Object]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Object]
		public CrossReference getSuperTypeObjectCrossReference_2_1_0() { return cSuperTypeObjectCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeObjectIDTerminalRuleCall_2_1_0_1() { return cSuperTypeObjectIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=Member*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_4_0() { return cMembersMemberParserRuleCall_4_0; }

		//issecure?="issecure"?
		public Assignment getIssecureAssignment_5() { return cIssecureAssignment_5; }

		//"issecure"
		public Keyword getIssecureIssecureKeyword_5_0() { return cIssecureIssecureKeyword_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeObjectCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeObjectIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeObjectCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdentifierAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdentifierINTTerminalRuleCall_5_0 = (RuleCall)cIdentifierAssignment_5.eContents().get(0);
		private final Assignment cIssecureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cIssecureIssecureKeyword_6_0 = (Keyword)cIssecureAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGetsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInputsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cInputsTypeCrossReference_7_1_0 = (CrossReference)cInputsAssignment_7_1.eContents().get(0);
		private final RuleCall cInputsTypeIDTerminalRuleCall_7_1_0_1 = (RuleCall)cInputsTypeCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturnsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOutpustAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cOutpustTypeCrossReference_8_1_0 = (CrossReference)cOutpustAssignment_8_1.eContents().get(0);
		private final RuleCall cOutpustTypeIDTerminalRuleCall_8_1_0_1 = (RuleCall)cOutpustTypeCrossReference_8_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Function:
		//	"function" name=ID ("extends" superType=[Object])? "{" "id" identifier=INT issecure?="issecure"? ("gets"
		//	inputs+=[Type]*)? ("returns" outpust+=[Type]*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"function" name=ID ("extends" superType=[Object])? "{" "id" identifier=INT issecure?="issecure"? ("gets"
		//inputs+=[Type]*)? ("returns" outpust+=[Type]*)? "}"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superType=[Object])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Object]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Object]
		public CrossReference getSuperTypeObjectCrossReference_2_1_0() { return cSuperTypeObjectCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeObjectIDTerminalRuleCall_2_1_0_1() { return cSuperTypeObjectIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"id"
		public Keyword getIdKeyword_4() { return cIdKeyword_4; }

		//identifier=INT
		public Assignment getIdentifierAssignment_5() { return cIdentifierAssignment_5; }

		//INT
		public RuleCall getIdentifierINTTerminalRuleCall_5_0() { return cIdentifierINTTerminalRuleCall_5_0; }

		//issecure?="issecure"?
		public Assignment getIssecureAssignment_6() { return cIssecureAssignment_6; }

		//"issecure"
		public Keyword getIssecureIssecureKeyword_6_0() { return cIssecureIssecureKeyword_6_0; }

		//("gets" inputs+=[Type]*)?
		public Group getGroup_7() { return cGroup_7; }

		//"gets"
		public Keyword getGetsKeyword_7_0() { return cGetsKeyword_7_0; }

		//inputs+=[Type]*
		public Assignment getInputsAssignment_7_1() { return cInputsAssignment_7_1; }

		//[Type]
		public CrossReference getInputsTypeCrossReference_7_1_0() { return cInputsTypeCrossReference_7_1_0; }

		//ID
		public RuleCall getInputsTypeIDTerminalRuleCall_7_1_0_1() { return cInputsTypeIDTerminalRuleCall_7_1_0_1; }

		//("returns" outpust+=[Type]*)?
		public Group getGroup_8() { return cGroup_8; }

		//"returns"
		public Keyword getReturnsKeyword_8_0() { return cReturnsKeyword_8_0; }

		//outpust+=[Type]*
		public Assignment getOutpustAssignment_8_1() { return cOutpustAssignment_8_1; }

		//[Type]
		public CrossReference getOutpustTypeCrossReference_8_1_0() { return cOutpustTypeCrossReference_8_1_0; }

		//ID
		public RuleCall getOutpustTypeIDTerminalRuleCall_8_1_0_1() { return cOutpustTypeIDTerminalRuleCall_8_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final AbstractElementElements pAbstractElement;
	private final TypeElements pType;
	private final DatatypeElements pDatatype;
	private final MemberElements pMember;
	private final ObjectElements pObject;
	private final FunctionElements pFunction;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MetamodelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pType = new TypeElements();
		this.pDatatype = new DatatypeElements();
		this.pMember = new MemberElements();
		this.pObject = new ObjectElements();
		this.pFunction = new FunctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.tugraz.xtext.metamodel.Metamodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=AbstractElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	//AbstractElement:
	//	Type | Function;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Type:
	//	Datatype | //| SecureObject
	//	Object;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Datatype:
	//	"datatype" name=ID;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	////SecureObject:
	////	"object" name = ID "{"
	////		(members += Member)*
	////	"}"
	////;
	//Member:
	//	name=ID ":" type=[Type];
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Object:
	//	"object" name=ID ("extends" superType=[Object])? "{" members+=Member* issecure?="issecure"? "}";
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//Function:
	//	"function" name=ID ("extends" superType=[Object])? "{" "id" identifier=INT issecure?="issecure"? ("gets"
	//	inputs+=[Type]*)? ("returns" outpust+=[Type]*)? "}";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
